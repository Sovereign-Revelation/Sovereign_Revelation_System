{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://sovereign-revelation.org/schema/oracle/oracle-portal.schema.json",
  "title": "Oracle Portal Workflow",
  "description": "Workflow for managing AI oracle nodes in SRP.",
  "type": "object",
  "required": ["function", "schema", "steps", "metadata", "orchestration", "security"],
  "properties": {
    "function": {
      "type": "string",
      "const": "manageOracleNode",
      "description": "Workflow for oracle node registration and data provision."
    },
    "metadata": {
      "type": "object",
      "properties": {
        "schema_version": { "type": "string", "const": "5.3.1" },
        "version": { "type": "string", "const": "1.0.0" },
        "author": { "type": "string", "const": "Cipher" },
        "description": { "type": "string", "const": "Manages AI oracle nodes for consensus and data provision." },
        "created": { "type": "string", "format": "date-time", "examples": ["2025-05-25T01:17:00Z"] },
        "updated": { "type": "string", "format": "date-time", "examples": ["2025-05-25T01:17:00Z"] },
        "tags": { "type": "array", "items": { "type": "string" }, "examples": [["oracle", "ai", "consensus"]] },
        "visualization": { "type": "string", "examples": ["graph TD\nA[Start] --> B[Validate SID]\nB --> C[Register Node]\nC --> D[Provide Data]"] },
        "examples": { "type": "array", "items": { "type": "string", "format": "uri" }, "examples": [["https://github.com/srp-exodus/oracle-examples"]] },
        "docs": { "type": "string", "format": "uri", "const": "https://sovereign-revelation.org/docs/oracle" },
        "tooling": { "type": "array", "items": { "type": "string" }, "examples": [["vscode", "jsonflow-cli", "ethers.js"]] },
        "compliance": { "type": "array", "items": { "type": "string" }, "examples": [["GDPR"]] },
        "license": { "type": "string", "const": "MIT" },
        "standards": { "type": "array", "items": { "type": "string" }, "examples": [["OpenAPI"]] }
      },
      "required": ["schema_version", "version", "author", "description", "examples", "docs", "license"]
    },
    "schema": {
      "type": "object",
      "properties": {
        "inputs": {
          "type": "object",
          "properties": {
            "sid": {
              "type": "string",
              "description": "Soulbound Identity of the node operator.",
              "constraints": { "pattern": "^0x[a-fA-F0-9]{40}$" }
            },
            "nodeData": {
              "type": "object",
              "description": "Oracle node details.",
              "properties": {
                "type": { "type": "string", "enum": ["priceFeed", "gameOutcome", "eventData"] },
                "endpoint": { "type": "string", "format": "uri" }
              },
              "required": ["type", "endpoint"]
            }
          },
          "required": ["sid", "nodeData"]
        },
        "outputs": {
          "type": "object",
          "properties": {
            "nodeId": {
              "type": "string",
              "description": "Unique node ID.",
              "destination": "database",
              "constraints": { "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$" }
            },
            "pulseReward": {
              "type": "integer",
              "description": "Pulse Score reward for node operation.",
              "destination": "database",
              "constraints": { "minimum": 0 }
            }
          },
          "required": ["nodeId", "pulseReward"]
        }
      },
      "required": ["inputs", "outputs"]
    },
    "steps": {
      "type": "array",
      "items": [
        {
          "id": "validateSID",
          "type": "control",
          "action": "validate",
          "language": "javascript",
          "code": "if (!input.sid.match(/^0x[a-fA-F0-9]{40}$/)) throw new Error('Invalid SID');",
          "input": "schema.inputs.sid",
          "on_error": { "action": "fail", "error_code": "INVALID_SID" }
        },
        {
          "id": "registerNode",
          "type": "database",
          "action": "store",
          "language": "javascript",
          "code": "await db.nodes.insert({ nodeId: uuid(), data: input.nodeData });",
          "input": "schema.inputs.nodeData",
          "output": "schema.outputs.nodeId",
          "on_error": { "action": "retry", "max_retries": 3 }
        },
        {
          "id": "rewardPulse",
          "type": "database",
          "action": "update",
          "language": "javascript",
          "code": "await db.pulse.update({ sid: input.sid }, { $inc: { pulseScore: output.pulseReward } });",
          "input": "schema.inputs.sid",
          "output": "schema.outputs.pulseReward",
          "on_error": { "action": "notify", "error_code": "DB_ERROR" }
        }
      ],
      "minItems": 1
    },
    "security": {
      "type": "object",
      "properties": {
        "authentication": { "type": "object", "properties": { "type": { "type": "string", "const": "none" } }, "required": ["type"] },
        "authorization": {
          "type": "object",
          "properties": {
            "type": { "type": "string", "const": "rbac" },
            "roles": { "type": "array", "items": { "type": "string" }, "examples": [["oracle"]] },
            "permissions": { "type": "array", "items": { "type": "string" }, "examples": [["register_node", "provide_data"]] }
          },
          "required": ["type", "roles", "permissions"]
        },
        "encryption": {
          "type": "object",
          "properties": { "algorithm": { "type": "string", "const": "AES-256" }, "key_management": { "type": "string", "const": "vault" } },
          "required": ["algorithm"]
        },
        "secrets": {
          "type": "object",
          "properties": { "manager": { "type": "string", "const": "hashicorp-vault" }, "refs": { "type": "array", "items": { "type": "string" }, "examples": [["oracle_key"]] } },
          "required": ["manager"]
        }
      },
      "required": ["authentication", "authorization", "encryption", "secrets"]
    },
    "orchestration": {
      "type": "object",
      "properties": {
        "type": { "type": "string", "const": "sequential" },
        "runtime": { "type": "string", "const": "nodejs" },
        "scaling": { "type": "object", "properties": { "min_instances": { "type": "integer", "const": 1 }, "max_instances": { "type": "integer", "const": 5 } } }
      },
      "required": ["type", "runtime"]
    }
  },
  "additionalProperties": false
}